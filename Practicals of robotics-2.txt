Practical:1-A
import ch.aplu.robotsim.*;
public class MoveWithGear1{
    public MoveWithGear1(){
        
        NxtRobot nxtRobot = new NxtRobot();
        Gear g = new Gear();
        nxtRobot.addPart(g);
        
        g.forward(1000);
        g.setSpeed(30);
        g.left(900);
        g.forward(5000);
        g.setSpeed(100);
        g.left(300);
        g.forward(4000);
        
        nxtRobot.exit();
}
public static void main(String[] args){
    new MoveWithGear1();
}
}

Practical:1-B
//moving with gear in square motion
import ch.aplu.robotsim.*;

public class SquareUsingGears {
    SquareUsingGears()
    {
        NxtRobot nxtRobot = new NxtRobot();
        Gear g = new Gear();
        nxtRobot.addPart(g);
        for (int i = 0; i < 4; i++) {
            g.setSpeed(50);
            g.forward(2000);        
            g.left(550);
        }
        nxtRobot.exit();
    }
    
    public static void main(String a[])
    {
        new SquareUsingGears();
    }
}

Practical 2 
//Circular Motion Using Gears 
import ch.aplu.robotsim.*;

public class CircularMotionUsingGears {
    CircularMotionUsingGears()
    {
        NxtRobot nxtRobot = new NxtRobot();
        Gear g = new Gear();
        nxtRobot.addPart(g);
        while (true) {
           g.setSpeed(60);
            g.forward(100);        
            g.left(80);
        }
    }
    
    public static void main(String a[])
    {
        new CircularMotionUsingGears();
    }
}

Practical 3
Moving with Two Motors
import ch.aplu.robotsim.*;
public class TwoMotorsMove{
    public TwoMotorsMove(){
        
        NxtRobot nxtRobot = new NxtRobot();
        Motor motorLeft = new Motor(MotorPort.A);
        Motor motorRight = new Motor(MotorPort.B);
        
        nxtRobot.addPart(motorLeft);
        nxtRobot.addPart(motorRight);
        
        motorLeft.forward();
        motorRight.forward();
        
        //Right
       
        motorRight.stop();
        Tools.delay(1000);
        
        motorRight.forward();
        Tools.delay(1000);
        
        //Left
       
        motorLeft.stop();
        Tools.delay(1000);
        
        motorLeft.forward();
        Tools.delay(1000);
        
        Tools.delay(1000);
        
        motorLeft.stop();
        Tools.delay(1000);
        
        motorLeft.forward();
        Tools.delay(1000);
          
}
public static void main(String[] args){
    
    new TwoMotorsMove();
    
}
}
Practiacl 4 A
Circular motion using arc function
import ch.aplu.robotsim.*;

public class CircularMotionUsingArc{
    
    public CircularMotionUsingArc(){
        NxtRobot Robot = new NxtRobot();
        Gear g =new Gear();
        Robot.addPart(g);
        g.setSpeed(60);
        g.leftArc(0.2,7000);
        g.rightArc(0.2);
        Tools.delay(5000);
        Robot.exit();
}
    public static void main(String[] args){
        new CircularMotionUsingArc();
    }
}

Practicle 4 b
import ch.aplu.robotsim.*;

public class ArcUsingDifferentImage4b{
    public ArcUsingDifferentImage4b(){
        
        NxtRobot nxtRobot = new NxtRobot();
        Gear g = new Gear();
        nxtRobot.addPart(g);
        
        g.forward(200);
        g.setSpeed(50);
        
        g.leftArc(0.2,7000);
        g.forward(200);
        
        g.leftArc(0.2,7000);
        g.forward(200);
        
        g.leftArc(0.2,7000);
        g.forward(200);

        g.leftArc(0.2,7000);
        g.forward(200);
        
        nxtRobot.exit();
    }
public static void main(String[] args){
    ArcUsingDifferentImage4b m = new ArcUsingDifferentImage4b();
    NxtContext.setStartPosition(250,200);
    NxtContext.setStartDirection(90);
}
}


Practical 5A
Line Follower Robot
import ch.aplu.robotsim.*;
import sun.awt.windows.ThemeReader;

public class LineFollowerTrack {
    static{
        RobotContext.setStartPosition(80,438);
        RobotContext.useBackground("sprites/track.png");
    }
    LineFollowerTrack()
    {
        LegoRobot r = new LegoRobot();
        Gear g = new Gear();
        LightSensor ls = new LightSensor(SensorPort.S3);
        
        r.addPart(g);
        r.addPart(ls);
        
        g.forward();
        g.setSpeed(30);
        
        while(true)
        { 
            int v = ls.getValue();
            System.out.println(v);
            if (v > 10) {
                g.forward();
            }
            else {
                g.rightArc(0.03);
            }
            
           
            //438, 84
        }
    }
    public static void main(String args[])
    {
        new LineFollowerTrack();
    }
}
Practical 5 B
Line Follower Robot with Different Image
import ch.aplu.robotsim.*;

public class LineFollower {
    static{
        RobotContext.setStartPosition(50, 470);
        RobotContext.useBackground("sprites/road.gif");
    }
    LineFollower()
    {
        LegoRobot r = new LegoRobot();
        Gear g = new Gear();
        LightSensor ls = new LightSensor(SensorPort.S3);
        
        r.addPart(g);
        r.addPart(ls);
        
        g.forward();
        g.setSpeed(100);
        
        while(true)
        {
            int v = ls.getValue();
            if (v < 100) {
                g.forward();
            }
            if (v > 350 && v < 750) {
                g.leftArc(0.05);
            }
            if (v > 800) {
                g.rightArc(0.05);
            }
        }
    }
    public static void main(String args[])
    {
        new LineFollower();
    }
}
Liner follower 5 C 
white black
import ch.aplu.robotsim.*;
public class LineFollower 
{
    LineFollower()
    {
        LegoRobot robot = new LegoRobot();
        Gear gear = new Gear();
        LightSensor ls = new LightSensor(SensorPort.S3);
        robot.addPart(gear);
        gear.setSpeed(20);
        robot.addPart(ls);
        while(true)
        {
            int v = ls.getValue();
            System.out.println("Value" + v);
            //if(v<)//white
                gear.forward();
            if(v>1000 || v<=7)//white
                gear.leftArc(0.05);
            if(v>1000)//black
                gear.rightArc(0.05);
            
         }
    }
    public static void main(String args[])
    {
        new LineFollower();
    }
    static
    {
        RobotContext.setStartPosition(408,500);
       // RobotContext.setStartDirection(-90);
        RobotContext.useBackground("sprites/bg2.gif");
    }
    
}
Practical 6 A
import ch.aplu.robotsim.*;

public class PathFinder2Sensors{
    public PathFinder2Sensors(){
        NxtRobot robot=new NxtRobot();
        Gear gear=new Gear();
        LightSensor ls1=new LightSensor(SensorPort.S1); 
        LightSensor ls2=new LightSensor(SensorPort.S2);
        
        robot.addPart(gear);
        robot.addPart(ls1);
        robot.addPart(ls2);
        gear.forward();
        
        
        while(true)
        {
            int rightValue=ls1.getValue();
            int leftValue=ls2.getValue();
            int d=rightValue-leftValue;
            if(d>100)
                gear.rightArc(0.1);
            if(d <-100) 
                gear.leftArc(0.1);
            if(d>-100 && d < 100 && rightValue> 500)
                gear.forward();
}
    }
public static void main(String[] args){
    new PathFinder2Sensors();
    }


static{
NxtContext.setStartPosition(250,490);
NxtContext.setStartDirection(-90);
NxtContext.useBackground("sprites/path.gif");
}
}

Practical 7
Obstacle Resistance using Touch Sensor
package robotics;
import ch.aplu.robotsim.*;

public class ResistObstacle {
    
    public ResistObstacle()
    {
        LegoRobot r = new LegoRobot();
        Gear g = new Gear();
        TouchSensor t1 = new TouchSensor(SensorPort.S1);
        TouchSensor t2 = new TouchSensor(SensorPort.S2);
        
        r.addPart(g);
        r.addPart(t1);
        r.addPart(t2);
        
        g.setSpeed(100);
        g.right(200);
        g.forward();
        
        while(true)
        {
            Boolean b1 = t1.isPressed();
            Boolean b2 = t2.isPressed();
            
            if (b1 && b2) {
                g.backward(100);
                g.left(150);
                g.forward();
            }
            else if (b1) {
                g.backward(100);
                g.left(100);
                g.forward();
            }
            else if (b2) {
                g.backward(100);
                g.right(100);
                g.forward();
            }
        }
    }
    
    public static void main(String args[])
    {
        new ResistObstacle();
    }
    
    static
    {
        RobotContext.setStartPosition(50, 220);
        RobotContext.useObstacle(RobotContext.channel);
    }
}


Practical 8

Robot with Ultrasonic Sensor.
package Robotics;
import ch.aplu.robotsim.*;
import java.awt.Color;
import java.awt.Point;
import java.awt.color.*;
public class Ultra_Ex {
public Ultra_Ex()
 {
 LegoRobot robot= new LegoRobot();
 Gear gear = new Gear();
 robot.addPart(gear);
 UltrasonicSensor us= new UltrasonicSensor(SensorPort.S1);
 robot.addPart(us);
 us.setProximityCircleColor(Color.lightGray);
 
 double arc=0.5;
 gear.setSpeed(50);
 gear.rightArc(arc);
 boolean isRightArc=true;
 
 int oldDistance=0;
 
 while(true)
 {
 Tools.delay(100);
 int distance = us.getDistance();
 if (distance ==-1)
 {
 continue;
 }
 if (distance<oldDistance)
 {
 if(isRightArc)
 {
 gear.leftArc(arc);
 isRightArc =false;
 }
 else 
 {
 gear.rightArc(arc);
 isRightArc=true;
 }
 }
 oldDistance=distance;
 
 }
 
 }
 static 
 {
 Point[] mesh_bar=
 {
 new Point(10,200), new Point(-10,200),
 new Point(-10,-200), new Point(10,-200)
 };
 RobotContext.useTarget("sprites/bar1.gif",mesh_bar, 200,250);
 RobotContext.useTarget("sprites/bar1.gif",mesh_bar, 300,250);
 RobotContext.setStartPosition( 250,460);
 
 }
 
 public static void main(String args[])
 {
 new Ultra_Ex();
 }
 
}
